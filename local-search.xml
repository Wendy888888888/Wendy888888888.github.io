<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>oj打开方式</title>
    <link href="/2024/10/05/oj%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/"/>
    <url>/2024/10/05/oj%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p>万能头：#include &lt;bits&#x2F;stdc++.h&gt;  </p><div class="note note-success">            <p>1.%s 表示字符串。</p><ol start="2"><li>%c 表示字符。</li><li>%lf 表示双精度浮点数 ( double )。</li><li>%lld 表示长整型 ( long long )。  </li><li>%llu 表示无符号长整型 ( unsigned long long )， 无符号整数不能读<br>入负数</li></ol>          </div><p><strong>输入情况1</strong>：若干个数字，最后一个数字是 0</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">while</span>(cin &gt;&gt; n)<br>&#123;<br><span class="hljs-keyword">if</span>(n == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<span class="hljs-comment">//0的时候结束循环</span><br><span class="hljs-keyword">else</span><br>&#123;<br> 做别的操作<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>输入情况2</strong>：需要读有空格的字符串</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">getline</span>(cin,str);<br><span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> n = str.<span class="hljs-built_in">length</span>();<br></code></pre></td></tr></table></figure><p><strong>输入情况3</strong>：需要忽略空格</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">while</span>(cin &gt;&gt; str) &#123;<br>cout &lt;&lt; str &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><em>字符串转化为数字</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">string t;<br><span class="hljs-built_in">getline</span>(cin,t);<br><span class="hljs-type">int</span> n = <span class="hljs-built_in">stoi</span>(t);<span class="hljs-comment">//将字符串转化为数字</span><br></code></pre></td></tr></table></figure><p><em>数字转化为字符串</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> n;<br>string t;<br>cin &gt;&gt; n;<br>t = <span class="hljs-built_in">to_string</span>(n);<br></code></pre></td></tr></table></figure><h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;<span class="hljs-type">int</span>&gt; myVector = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br>myVector.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">6</span>); <span class="hljs-comment">// 在vector末尾添加一个新的整数6</span><br>myVector.<span class="hljs-built_in">pop_back</span>(); <span class="hljs-comment">// 删除最后一个元素  </span><br>myVector.<span class="hljs-built_in">erase</span>(myVector.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">1</span>); <span class="hljs-comment">// 删除第二个元素（基于0的索引）  </span><br>myVector.<span class="hljs-built_in">erase</span>(myVector.<span class="hljs-built_in">begin</span>(), myVector.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">2</span>); <span class="hljs-comment">// 删除前两个元素</span><br><span class="hljs-type">size_t</span> vectorSize = myVector.<span class="hljs-built_in">size</span>();<br></code></pre></td></tr></table></figure><p>遍历容器：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (vector&lt;<span class="hljs-type">int</span>&gt;::iterator it = myVector.<span class="hljs-built_in">begin</span>(); it != myVector.<span class="hljs-built_in">end</span>(); ++it) &#123;  <br>  cout &lt;&lt; *it &lt;&lt; endl;  <br>&#125;  <br><span class="hljs-comment">// 或者使用范围for循环  </span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : myVector) &#123;  <br>    cout &lt;&lt; num &lt;&lt; endl;  <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>动态规划</title>
    <link href="/2024/09/16/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <url>/2024/09/16/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    
    <content type="html"><![CDATA[<p>用标签块要用纯文本 不能放在代码框里</p><p>行内标签：</p><span class="label label-primary">text</span><p>便签：</p><div class="note note-success">            <p>文字 或者 <code>markdown</code> 均可</p>          </div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>算法</title>
    <link href="/2024/09/15/%E7%AE%97%E6%B3%95/"/>
    <url>/2024/09/15/%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>常数操作：O(1)</p><h2 id="位运算补充"><a href="#位运算补充" class="headerlink" title="位运算补充"></a>位运算补充</h2><p>1.给定一个数组，其中只有一种数出现了奇数次，其他都出现偶数次，怎么找到这一种数</p><p><img src="https://raw.githubusercontent.com/Wendy888888888/image/main/image-20240916154510883.png" alt="按位异或就是无进位相加 该图解释了异或运算与顺序无关"></p><p>eor与数组中全部的数都异或下来，出现偶数次的异或结果是0，奇数次的异或结果就是该数，代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> eor=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> arr[<span class="hljs-number">6</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">7</span>;i++)&#123;<br>    eor^=arr[i];<br>&#125;<br>cout&lt;&lt;eor;<br></code></pre></td></tr></table></figure><p>2.给定一个数组，其中只有两种数出现了奇数次，其他都出现偶数次，怎么找到这两种数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> eor=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> arr[<span class="hljs-number">6</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">7</span>;i++)&#123;<br>    eor^=arr[i];<br>&#125;<span class="hljs-comment">//最终eor=a^b,题目中说是两种数，因此eor！=0，即至少有一个数位是1</span><br><span class="hljs-type">int</span> rightone=eor&amp;(~eor<span class="hljs-number">+1</span>);<span class="hljs-comment">//位运算提取得到和eor同数位并保存最右边1的套路写法</span><br><br><span class="hljs-type">int</span> eor2=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">7</span>;i++)&#123;<br>    <span class="hljs-keyword">if</span>(arr[i]&amp;rightone==<span class="hljs-number">1</span>)&#123;<br>        eor2^=arr[i]<br>    &#125;<br>&#125;<span class="hljs-comment">//eor2找到的就是a或者b中的一个</span><br>cout&lt;&lt;eor2;<br>cout&lt;&lt;eor^eor2;<span class="hljs-comment">//就是另一个出现了奇数次的数</span><br></code></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>简单选择排序和冒泡排序都是*<em>O(n</em>2)**，无论什么情况。(代码省略)</p><p>插入排序最差情况（初始是倒序）是<strong>O(n*2)</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sort3</span><span class="hljs-params">(<span class="hljs-type">int</span> *arr)</span></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-number">6</span>;i++)&#123;<span class="hljs-comment">//让0~i有序</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i<span class="hljs-number">-1</span>;j&gt;=<span class="hljs-number">0</span>&amp;&amp;arr[j]&gt;arr[j<span class="hljs-number">+1</span>];j--)&#123;<span class="hljs-comment">//调整j+1(i)的位置</span><br>        <span class="hljs-built_in">swap</span>(arr[j<span class="hljs-number">+1</span>],arr[j]);<br>    &#125;<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="对数器（替代在线测试平台）"><a href="#对数器（替代在线测试平台）" class="headerlink" title="对数器（替代在线测试平台）"></a>对数器（替代在线测试平台）</h2><p><img src="https://raw.githubusercontent.com/Wendy888888888/image/main/image-20240916211907273.png"></p><p>以插入排序为例子，方法b：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">comparator</span><span class="hljs-params">(<span class="hljs-type">int</span> *arr,<span class="hljs-type">int</span> size)</span></span>&#123;<br><span class="hljs-built_in">sort</span>(arr,arr<span class="hljs-number">+6</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>生成随机数组：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">copyArray</span><span class="hljs-params">(<span class="hljs-type">int</span> *arr1,<span class="hljs-type">int</span> size,<span class="hljs-type">int</span> rangeL,<span class="hljs-type">int</span> rangeR)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;size,i++)&#123;<br>        arr[i]=<span class="hljs-built_in">rand</span>()%(rangeR-rangeL<span class="hljs-number">+1</span>)+rangeL;<span class="hljs-comment">//生成[rangeL,rangeR]的随机数</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>复制数组：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">copyArray</span><span class="hljs-params">(<span class="hljs-type">int</span> *arr1,<span class="hljs-type">int</span> *arr2,<span class="hljs-type">int</span> size)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;size;i++)&#123;<br>arr2[i]=arr1[i];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对数器测试</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">(<span class="hljs-type">int</span> testTime, <span class="hljs-type">int</span> maxSize, <span class="hljs-type">int</span> rangeL, <span class="hljs-type">int</span> rangeR)</span> </span>&#123;<br>    <span class="hljs-type">bool</span> succeed = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; testTime; i++) &#123;<br>        <span class="hljs-type">int</span> size = <span class="hljs-built_in">rand</span>() % maxSize + <span class="hljs-number">1</span>;  <span class="hljs-comment">// 随机数组长度</span><br>        <span class="hljs-type">int</span> *arr1 = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[size];<span class="hljs-comment">//开辟数组空间</span><br>        <span class="hljs-type">int</span> *arr2 = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[size];<br>        <br>        <span class="hljs-comment">// 生成随机数组</span><br>        <span class="hljs-built_in">generateRandomArray</span>(arr1, size, rangeL, rangeR);<br>        <span class="hljs-built_in">copyArray</span>(arr1, arr2, size);  <span class="hljs-comment">// 复制到另一个数组</span><br><br>        <span class="hljs-comment">// 使用插入排序</span><br>        <span class="hljs-built_in">sort3</span>(arr1, size);<br>        <span class="hljs-comment">// 使用std::sort</span><br>        <span class="hljs-built_in">comparator</span>(arr2, size);<br><br>        <span class="hljs-comment">// 比较两种排序结果</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; size; j++) &#123;<br>            <span class="hljs-keyword">if</span> (arr1[j] != arr2[j]) &#123;<br>                succeed = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">delete</span>[] arr1;<br>        <span class="hljs-keyword">delete</span>[] arr2;<br><br>        <span class="hljs-keyword">if</span> (!succeed) &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;Test failed!&quot;</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (succeed) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;All tests passed!&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试样例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">srand</span>(<span class="hljs-built_in">time</span>(<span class="hljs-number">0</span>));<br>    <span class="hljs-type">int</span> testTime = <span class="hljs-number">1000</span>;  <span class="hljs-comment">// 测试次数</span><br>    <span class="hljs-type">int</span> maxSize = <span class="hljs-number">100</span>;    <span class="hljs-comment">// 最大数组大小</span><br>    <span class="hljs-type">int</span> rangeL = <span class="hljs-number">0</span>;       <span class="hljs-comment">// 数组元素最小值</span><br>    <span class="hljs-type">int</span> rangeR = <span class="hljs-number">100</span>;     <span class="hljs-comment">// 数组元素最大值</span><br><br>    <span class="hljs-built_in">test</span>(testTime, maxSize, rangeL, rangeR);<br><br></code></pre></td></tr></table></figure><h2 id="用递归找给定数组给定范围的最大值"><a href="#用递归找给定数组给定范围的最大值" class="headerlink" title="用递归找给定数组给定范围的最大值"></a>用递归找给定数组给定范围的最大值</h2><p><strong>实质：多叉树后续遍历</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">process</span><span class="hljs-params">(<span class="hljs-type">int</span> *arr,<span class="hljs-type">int</span> L,<span class="hljs-type">int</span> R)</span></span>&#123;<br><span class="hljs-type">int</span> mid,lmid,rmid;<br>    <span class="hljs-keyword">if</span>(L-R==<span class="hljs-number">0</span>)&#123;<br>       <span class="hljs-keyword">return</span> arr[L];<br>    &#125;<br>     <span class="hljs-keyword">else</span>&#123;<br>    mid=L+((R-L)/<span class="hljs-number">2</span>);<br>    lmid=<span class="hljs-built_in">process</span>(arr,L,mid);<br>    rmid=<span class="hljs-built_in">process</span>(arr,mid<span class="hljs-number">+1</span>,R);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(lmid,rmid);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此类问题可以分为等量的子问题 满足master公式 其中O（）是子问题除了调用之外的时间复杂度：</p><p><img src="https://raw.githubusercontent.com/Wendy888888888/image/main/1727773742560.png"></p><div class="note note-success">            <p>递归特点：</p><p>1.函数名称与内部调用名称相同</p><p>2.有临界条件</p>          </div><h2 id="归并排序-时间O-nlogn-空间O-n"><a href="#归并排序-时间O-nlogn-空间O-n" class="headerlink" title="归并排序(时间O(nlogn) 空间O(n))"></a>归并排序(时间O(nlogn) 空间O(n))</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge1</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; arr,<span class="hljs-type">int</span> L,<span class="hljs-type">int</span> mid,<span class="hljs-type">int</span> R)</span></span>&#123;<br>    vector &lt;<span class="hljs-type">int</span>&gt;help;<br>    <span class="hljs-type">int</span> p=L;<br>    <span class="hljs-type">int</span> q=mid<span class="hljs-number">+1</span>;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 合并两个子数组</span><br>    <span class="hljs-keyword">while</span> (p &lt;= mid &amp;&amp; q &lt;= R) &#123;<br>        <span class="hljs-keyword">if</span> (arr[p] &lt;= arr[q]) &#123;<br>            help.<span class="hljs-built_in">push_back</span>(arr[p]);<br>            p++;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            help.<span class="hljs-built_in">push_back</span>(arr[q]);<br>            q++;<br>        &#125;<br>        <span class="hljs-comment">// 注意：i 的递增是在循环中自动发生的，因为我们在使用 help.push_back()</span><br>    &#125;<br><br>    <span class="hljs-comment">// 复制剩余的元素（如果有）</span><br>    <span class="hljs-keyword">while</span> (p &lt;= mid) &#123;<br>        help.<span class="hljs-built_in">push_back</span>(arr[p]);<br>        p++;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (q &lt;= R) &#123;<br>        help.<span class="hljs-built_in">push_back</span>(arr[q]);<br>        q++;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;help.<span class="hljs-built_in">size</span>();j++)&#123;<br>    arr[L+j]=help[j];&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">process</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; arr,<span class="hljs-type">int</span> L,<span class="hljs-type">int</span> R)</span></span>&#123;<br><span class="hljs-keyword">if</span>(R-L==<span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br> <span class="hljs-type">int</span> mid = L + (R - L) / <span class="hljs-number">2</span>;  <span class="hljs-comment">// 修正了计算 mid 的方式</span><br><span class="hljs-built_in">process</span>(arr,L,mid);<br><span class="hljs-built_in">process</span>(arr,(mid<span class="hljs-number">+1</span>),R);<br><span class="hljs-built_in">merge1</span>(arr,L,mid,R);<br>&#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="归并排序拓展——小和问题"><a href="#归并排序拓展——小和问题" class="headerlink" title="归并排序拓展——小和问题"></a>归并排序拓展——小和问题</h3><p><img src="https://raw.githubusercontent.com/Wendy888888888/image/main/image-20241004224904743.png" alt="image-20241004224904743"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">merge2</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp;arr,<span class="hljs-type">int</span> L,<span class="hljs-type">int</span> mid, <span class="hljs-type">int</span> R)</span></span>&#123;<br><span class="hljs-comment">//产生小和</span><br><span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> p=L;<br><span class="hljs-type">int</span> q=mid<span class="hljs-number">+1</span>;<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br><br>vector&lt;<span class="hljs-type">int</span>&gt;help;<br><span class="hljs-keyword">while</span> (p&lt;(mid<span class="hljs-number">+1</span>) &amp;&amp;q&lt;R<span class="hljs-number">+1</span>)&#123;<br><br>    res=res+(arr[p]&lt;arr[q]?(arr[p]*(R-q<span class="hljs-number">+1</span>)):<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">//接下来是正常的归并排序</span><br>    <span class="hljs-keyword">if</span> (arr[p]&lt;arr[q])&#123;<br>    help.<span class="hljs-built_in">push_back</span>(arr[p]);<br>        p++;<br><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>   help.<span class="hljs-built_in">push_back</span>(arr[q]);<br>    q++;<br>   &#125;<br>&#125;<br><span class="hljs-keyword">while</span>(p&lt;(mid<span class="hljs-number">+1</span>))&#123;<br>   help.<span class="hljs-built_in">push_back</span>(arr[p]);<br>   p++;<br>&#125;<br><span class="hljs-keyword">while</span>(q&lt;R<span class="hljs-number">+1</span>)&#123;<br>  help.<span class="hljs-built_in">push_back</span>(arr[q]);<br><br>   q++;<br>&#125;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">xiaohe</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; arr,<span class="hljs-type">int</span> L,<span class="hljs-type">int</span> R)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(L==R)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-type">int</span> mid=L+(R-L)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">xiaohe</span>(arr,L,mid)+<span class="hljs-built_in">xiaohe</span>(arr,mid<span class="hljs-number">+1</span>,R)+<span class="hljs-built_in">merge2</span>(arr,L,mid,R);<br><br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>vector &lt;<span class="hljs-type">int</span>&gt;arr=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>&#125;;<br>cout&lt;&lt;<span class="hljs-built_in">xiaohe</span>(arr,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/09/14/hello-world/"/>
    <url>/2024/09/14/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="Tag"><a href="#Tag" class="headerlink" title="Tag"></a>Tag</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% note success %&#125;<br>文字 或者 <span class="hljs-code">`markdown`</span> 均可<br>&#123;% endnote %&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
