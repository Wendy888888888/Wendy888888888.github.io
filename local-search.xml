<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>链表</title>
    <link href="/2024/10/20/%E9%93%BE%E8%A1%A8/"/>
    <url>/2024/10/20/%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><p>哈希表都是常数级的查询</p><h3 id="哈希map"><a href="#哈希map" class="headerlink" title="哈希map"></a>哈希map</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    unordered_map&lt;string, <span class="hljs-type">int</span>&gt; myMap;  <span class="hljs-comment">//键是string，key是int</span><br><span class="hljs-comment">// 插入键值对</span><br>myMap[<span class="hljs-string">&quot;apple&quot;</span>] = <span class="hljs-number">5</span>;<br>myMap[<span class="hljs-string">&quot;banana&quot;</span>] = <span class="hljs-number">3</span>;<br>myMap[<span class="hljs-string">&quot;orange&quot;</span>] = <span class="hljs-number">7</span>;<br><span class="hljs-comment">//访问值</span><br>cout&lt;&lt;myMap[<span class="hljs-string">&quot;apple&quot;</span>]&lt;&lt;endl;<br><span class="hljs-comment">//删除</span><br>myMap.<span class="hljs-built_in">erase</span>(<span class="hljs-string">&quot;banana&quot;</span>);<br><span class="hljs-comment">//遍历</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp;pair:myMap)&#123;<br>    cout&lt;&lt;pair.first&lt;&lt;endl;<br>    cout&lt;&lt;pair.second&lt;&lt;endl;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>哈希表通常用键取值，不像pair对里面用<strong>数组索引</strong>查询成对值，如下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scss">vector&lt;pair&lt;double,double&gt;&gt;<span class="hljs-built_in">fushu</span>(n);<br><span class="hljs-built_in">for</span>(int i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>cin&gt;&gt;modules<span class="hljs-selector-attr">[i]</span><span class="hljs-selector-class">.first</span>&gt;&gt;modules<span class="hljs-selector-attr">[i]</span><span class="hljs-selector-class">.second</span>;<br>&#125;<br><span class="hljs-comment">//double a = modules[i].first, b = modules[i].second;</span><br><span class="hljs-comment">//double c = modules[j].first, d = modules[j].second;</span><br></code></pre></td></tr></table></figure><h3 id="哈希set"><a href="#哈希set" class="headerlink" title="哈希set"></a>哈希set</h3><p>set无重复元素，也没有数组一样的索引，但是能用迭代器遍历所有元素</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    unordered_set&lt;<span class="hljs-type">int</span>&gt;myset;<span class="hljs-comment">//不含重复元素</span><br>    myset.<span class="hljs-built_in">insert</span>(<span class="hljs-number">6</span>);<br>    myset.<span class="hljs-built_in">insert</span>(<span class="hljs-number">9</span>);<br>    <span class="hljs-keyword">if</span>(myset.<span class="hljs-built_in">count</span>(<span class="hljs-number">6</span>))&#123;cout&lt;&lt;<span class="hljs-string">&quot;元素存在&quot;</span>&lt;&lt;endl;&#125;<br><br>    myset.<span class="hljs-built_in">erase</span>(<span class="hljs-number">6</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> elem:myset)&#123;<br>        cout&lt;&lt;elem&lt;&lt;endl;<br><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="检验回文链表"><a href="#检验回文链表" class="headerlink" title="检验回文链表"></a>检验回文链表</h2><p>需要用到的数据结构：链表、栈</p><p>注意理解层面：n1、n2、n3都是指针，是把指针指向的地址赋给等号左侧的指针。每个指针都指向了一个地址，没有更换前一个地址可由多个指针同时指向。</p><p><strong>用栈</strong>（用额外空间）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">ishuiwenlink</span><span class="hljs-params">(listnode *head)</span></span>&#123;<br>    stack&lt;<span class="hljs-type">int</span>&gt; s;<br>    listnode *p;<br>    p=head;<br>    <span class="hljs-keyword">while</span>(p)&#123;<br>        s.<span class="hljs-built_in">push</span>(p-&gt;var);<br>        p=p-&gt;next;<br>    &#125;<br>    p=head;<br>    <span class="hljs-keyword">while</span>(p &amp;&amp;!s.<span class="hljs-built_in">empty</span>()) &#123;<br><br>         <span class="hljs-keyword">if</span>(s.<span class="hljs-built_in">top</span>()!=p-&gt;var)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>         &#125;<br>         p=p-&gt;next;<br>         s.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="链表补充"><a href="#链表补充" class="headerlink" title="链表补充"></a><strong>链表补充</strong></h2><p>打印链表函数，方便调试：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printlist</span><span class="hljs-params">(listnode * head)</span></span>&#123;<br>    listnode *current =head;<br>    <span class="hljs-keyword">while</span> (current)&#123;<br>        cout&lt;&lt;(current-&gt;var);<br>        current=current-&gt;next;<br>    &#125;<br>    cout&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>增，删：</p><p><strong>注意！！！</strong></p><div class="note note-success">            <p><strong>若想改变传进函数的指针的指向地址，必须用指针的指针&#x2F;引用</strong></p><p>删除链表元素记得考虑是不是头结点</p>          </div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">listnode</span>&#123;<br><span class="hljs-type">int</span> var;<br>listnode* next;<br><span class="hljs-built_in">listnode</span>(<span class="hljs-type">int</span> x):<span class="hljs-built_in">var</span>(x),<span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>)&#123;&#125;<br><br>&#125;;<br><span class="hljs-comment">//若想改变传进去的指针的指向地址，必须用指针的指针/引用</span><br><span class="hljs-comment">//头插法</span><br><span class="hljs-function">listnode* <span class="hljs-title">insertnode</span><span class="hljs-params">(<span class="hljs-type">int</span> x,listnode *&amp;head)</span></span>&#123;<br>    listnode *p=<span class="hljs-keyword">new</span> <span class="hljs-built_in">listnode</span>(x);<br>    p-&gt;next=head;<br>    head=p;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deletenode</span><span class="hljs-params">(<span class="hljs-type">int</span> x,listnode *&amp;head)</span></span>&#123;<br>    listnode *p=head;<br>    listnode *temp;<br>    <span class="hljs-keyword">while</span>(p)&#123;<br>        <span class="hljs-comment">//如果要删除的是头结点,不作为别人的next</span><br>        <span class="hljs-keyword">if</span>(head-&gt;var==x)&#123;<br>            head=p-&gt;next;<span class="hljs-comment">//可能改动头结点的指向</span><br><br>        &#125;<br>        <span class="hljs-comment">//不是头结点的情况</span><br>        <span class="hljs-keyword">if</span>(p-&gt;next != <span class="hljs-literal">nullptr</span>&amp;&amp;p-&gt;next-&gt;var==x)&#123;<br>            temp=p-&gt;next;<span class="hljs-comment">//(保存待删除的结点地址用于清内存防止泄露)</span><br>            p-&gt;next=p-&gt;next-&gt;next;<br>            <span class="hljs-keyword">delete</span> temp;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>        p=p-&gt;next;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>反转链表：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">listnode * <span class="hljs-title">reverselink</span><span class="hljs-params">( listnode *head)</span></span>&#123;<br><span class="hljs-comment">//初始化自己，前，后</span><br>    listnode *prev=<span class="hljs-literal">nullptr</span>;<br>    listnode *current;<br>    listnode *nextnode;<br>    current=head;<br>    <span class="hljs-comment">//循环体内：找到下一个结点，反连到前结点，自己赋给前，后赋给自己</span><br>    <span class="hljs-keyword">while</span>(current)&#123;<br>        nextnode=current-&gt;next;<br>        current-&gt;next=prev;<br>        prev=current;<br>        current=nextnode;<span class="hljs-comment">//转向原链表的下一个node</span><br>    &#125;<br>    <span class="hljs-comment">//出循环返回前指针</span><br>    <span class="hljs-keyword">return</span> prev;<br>&#125;<br><br></code></pre></td></tr></table></figure><div class="note note-success">            <p><strong>注意</strong>调用此函数的时候必须是：</p><p>printlist(reverselink(a));</p><p>因为他返回的是反转后链表的首结点，也是原链表的尾结点，reverselink(a)并没有改变指针a的地址</p><p>如果用printlist(a)；那就只剩一个结点可输出。</p>          </div><p>测试上述代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    listnode *a=<span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-comment">//用insert方式构建以a为头结点的链表</span><br>    <span class="hljs-built_in">insertnode</span>(<span class="hljs-number">6</span>,a);<br>    <span class="hljs-built_in">insertnode</span>(<span class="hljs-number">7</span>,a);<br>    <span class="hljs-built_in">insertnode</span>(<span class="hljs-number">6</span>,a);<br>    cout&lt;&lt;<span class="hljs-built_in">ishuiwenlink</span>(a)&lt;&lt;endl;<br>    <span class="hljs-built_in">printlist</span>(a);<br>    <span class="hljs-built_in">printlist</span>(<span class="hljs-built_in">reverselink</span>(a));<span class="hljs-comment">//链表的结构已经被破坏</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Wendy888888888/image/main/1729910280345.png"></p><p>单链表如果出现环，就会绕在环里出不来（因为每个node只有一个next值）</p><p>返回两个无环单链表第一个相交的结点</p><p><img src="https://raw.githubusercontent.com/Wendy888888888/image/main/1729909836333.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>oj打开方式</title>
    <link href="/2024/10/05/oj%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/"/>
    <url>/2024/10/05/oj%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p><strong>万能头：#include &lt;bits&#x2F;stdc++.h&gt;</strong>  </p><div class="note note-success">            <ol><li><p>%s 表示字符串。</p></li><li><p>%c 表示字符。</p></li><li><p>%lf 表示双精度浮点数 ( double )。</p></li><li><p>%lld 表示长整型 ( long long )。  </p></li><li><p>%llu 表示无符号长整型 ( unsigned long long )， 无符号整数不能读<br>入负数  </p></li><li><p>return 的巧妙放置可以自如切断程序</p></li></ol>          </div><p><strong>输入情况1</strong>：若干个数字，最后一个数字是 0</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">while</span>(cin &gt;&gt; n)<br>&#123;<br><span class="hljs-keyword">if</span>(n == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<span class="hljs-comment">//0的时候结束循环</span><br><span class="hljs-keyword">else</span><br>&#123;<br> 做别的操作<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>输入情况2</strong>：需要读有空格的字符串</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">getline</span>(cin,str);<br><span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> n = str.<span class="hljs-built_in">length</span>();<br></code></pre></td></tr></table></figure><p><strong>输入情况3</strong>：需要忽略空格</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">while</span>(cin &gt;&gt; str) &#123;<br>cout &lt;&lt; str &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><em>字符串转化为数字</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">string t;<br><span class="hljs-built_in">getline</span>(cin,t);<br><span class="hljs-type">int</span> n = <span class="hljs-built_in">stoi</span>(t);<span class="hljs-comment">//将字符串转化为数字</span><br></code></pre></td></tr></table></figure><p><em>数字转化为字符串</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> n;<br>string t;<br>cin &gt;&gt; n;<br>t = <span class="hljs-built_in">to_string</span>(n);<br></code></pre></td></tr></table></figure><p><strong>控制输出精度：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++">cout &lt;&lt; fixed &lt;&lt; <span class="hljs-built_in">setprecision</span>(<span class="hljs-number">9</span>) &lt;&lt; your_number &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;<span class="hljs-type">int</span>&gt; myVector = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br>myVector.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">6</span>); <span class="hljs-comment">// 在vector末尾添加一个新的整数6</span><br>myVector.<span class="hljs-built_in">pop_back</span>(); <span class="hljs-comment">// 删除最后一个元素  </span><br>myVector.<span class="hljs-built_in">erase</span>(myVector.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">1</span>); <span class="hljs-comment">// 删除第二个元素（基于0的索引）  </span><br>myVector.<span class="hljs-built_in">erase</span>(myVector.<span class="hljs-built_in">begin</span>(), myVector.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">2</span>); <span class="hljs-comment">// 删除前两个元素</span><br><span class="hljs-type">size_t</span> vectorSize = myVector.<span class="hljs-built_in">size</span>();<br></code></pre></td></tr></table></figure><p>遍历容器：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (vector&lt;<span class="hljs-type">int</span>&gt;::iterator it = myVector.<span class="hljs-built_in">begin</span>(); it != myVector.<span class="hljs-built_in">end</span>(); ++it) &#123;  <br>  cout &lt;&lt; *it &lt;&lt; endl;  <br>&#125;  <br><span class="hljs-comment">// 或者使用范围for循环  </span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : myVector) &#123;  <br>    cout &lt;&lt; num &lt;&lt; endl;  <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>pair的使用</strong>：处理复数等成对数据：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;pair&lt;<span class="hljs-type">double</span>,<span class="hljs-type">double</span>&gt;&gt;<span class="hljs-built_in">fushu</span>(n);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>cin&gt;&gt;modules[i].first&gt;&gt;modules[i].second;<br>&#125;<br><span class="hljs-comment">//double a = modules[i].first, b = modules[i].second;</span><br><span class="hljs-comment">//double c = modules[j].first, d = modules[j].second;</span><br></code></pre></td></tr></table></figure><h2 id="生成随机数"><a href="#生成随机数" class="headerlink" title="生成随机数"></a>生成随机数</h2><p>其中rand()能生成一个0到<code>RAND_MAX</code>（通常是32767）之间的随机数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> min = <span class="hljs-number">1</span>;  <br><span class="hljs-type">int</span> max = <span class="hljs-number">100</span>;  <br><span class="hljs-type">int</span> range_random_number = min + <span class="hljs-built_in">rand</span>() % (max - min + <span class="hljs-number">1</span>);  <br></code></pre></td></tr></table></figure><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br>stack&lt;<span class="hljs-type">int</span>&gt;s;<br>s.<span class="hljs-built_in">push</span>(<span class="hljs-number">10</span>);<span class="hljs-comment">//压栈</span><br>s.<span class="hljs-built_in">pop</span>()<span class="hljs-comment">//弹栈</span><br><span class="hljs-type">int</span> element = s.<span class="hljs-built_in">top</span>()<span class="hljs-comment">//访问栈顶不移除</span><br><span class="hljs-type">size_t</span> stacksize=s.<span class="hljs-built_in">size</span>();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>易错点</title>
    <link href="/2024/09/16/%E6%98%93%E9%94%99%E7%82%B9/"/>
    <url>/2024/09/16/%E6%98%93%E9%94%99%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<p>用标签块要用纯文本 不能放在代码框里</p><p>行内标签：</p><span class="label label-primary">text</span><p>便签：</p><div class="note note-success">            <p>文字 或者 <code>markdown</code> 均可</p>          </div><h2 id="语法易错点："><a href="#语法易错点：" class="headerlink" title="语法易错点："></a>语法易错点：</h2><p>1.数组溢出，注意循环的&lt;&#x3D; 或者&lt;分界</p><p>2.if比较语句&#x3D;&#x3D;写成赋值语句&#x3D;</p><p>3.涉及到double运算的时候别习惯性写成int</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>排序</title>
    <link href="/2024/09/15/%E6%8E%92%E5%BA%8F/"/>
    <url>/2024/09/15/%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="位运算补充"><a href="#位运算补充" class="headerlink" title="位运算补充"></a>位运算补充</h2><p>1.给定一个数组，其中只有一种数出现了奇数次，其他都出现偶数次，怎么找到这一种数</p><p><img src="https://raw.githubusercontent.com/Wendy888888888/image/main/image-20240916154510883.png" alt="按位异或就是无进位相加 该图解释了异或运算与顺序无关"></p><p>eor与数组中全部的数都异或下来，出现偶数次的异或结果是0，奇数次的异或结果就是该数，代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> eor=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> arr[<span class="hljs-number">6</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">7</span>;i++)&#123;<br>    eor^=arr[i];<br>&#125;<br>cout&lt;&lt;eor;<br></code></pre></td></tr></table></figure><p>2.给定一个数组，其中只有两种数出现了奇数次，其他都出现偶数次，怎么找到这两种数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> eor=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> arr[<span class="hljs-number">6</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">7</span>;i++)&#123;<br>    eor^=arr[i];<br>&#125;<span class="hljs-comment">//最终eor=a^b,题目中说是两种数，因此eor！=0，即至少有一个数位是1</span><br><span class="hljs-type">int</span> rightone=eor&amp;(~eor<span class="hljs-number">+1</span>);<span class="hljs-comment">//位运算提取得到和eor同数位并保存最右边1的套路写法</span><br><br><span class="hljs-type">int</span> eor2=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">7</span>;i++)&#123;<br>    <span class="hljs-keyword">if</span>(arr[i]&amp;rightone==<span class="hljs-number">1</span>)&#123;<br>        eor2^=arr[i]<br>    &#125;<br>&#125;<span class="hljs-comment">//eor2找到的就是a或者b中的一个</span><br>cout&lt;&lt;eor2;<br>cout&lt;&lt;eor^eor2;<span class="hljs-comment">//就是另一个出现了奇数次的数</span><br></code></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>简单选择排序和冒泡排序都是*<em>O(n</em>2)**，无论什么情况。(代码省略)</p><p>插入排序最差情况（初始是倒序）是<strong>O(n*2)</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sort3</span><span class="hljs-params">(<span class="hljs-type">int</span> *arr)</span></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-number">6</span>;i++)&#123;<span class="hljs-comment">//让0~i有序</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i<span class="hljs-number">-1</span>;j&gt;=<span class="hljs-number">0</span>&amp;&amp;arr[j]&gt;arr[j<span class="hljs-number">+1</span>];j--)&#123;<span class="hljs-comment">//调整j+1(i)的位置</span><br>        <span class="hljs-built_in">swap</span>(arr[j<span class="hljs-number">+1</span>],arr[j]);<br>    &#125;<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="对数器（替代在线测试平台）"><a href="#对数器（替代在线测试平台）" class="headerlink" title="对数器（替代在线测试平台）"></a>对数器（替代在线测试平台）</h2><p><img src="https://raw.githubusercontent.com/Wendy888888888/image/main/image-20240916211907273.png"></p><p>以插入排序为例子，方法b：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">comparator</span><span class="hljs-params">(<span class="hljs-type">int</span> *arr,<span class="hljs-type">int</span> size)</span></span>&#123;<br><span class="hljs-built_in">sort</span>(arr,arr<span class="hljs-number">+6</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>生成随机数组：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">copyArray</span><span class="hljs-params">(<span class="hljs-type">int</span> *arr1,<span class="hljs-type">int</span> size,<span class="hljs-type">int</span> rangeL,<span class="hljs-type">int</span> rangeR)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;size,i++)&#123;<br>        arr[i]=<span class="hljs-built_in">rand</span>()%(rangeR-rangeL<span class="hljs-number">+1</span>)+rangeL;<span class="hljs-comment">//生成[rangeL,rangeR]的随机数</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>复制数组：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">copyArray</span><span class="hljs-params">(<span class="hljs-type">int</span> *arr1,<span class="hljs-type">int</span> *arr2,<span class="hljs-type">int</span> size)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;size;i++)&#123;<br>arr2[i]=arr1[i];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对数器测试</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test</span><span class="hljs-params">(<span class="hljs-type">int</span> testTime, <span class="hljs-type">int</span> maxSize, <span class="hljs-type">int</span> rangeL, <span class="hljs-type">int</span> rangeR)</span> </span>&#123;<br>    <span class="hljs-type">bool</span> succeed = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; testTime; i++) &#123;<br>        <span class="hljs-type">int</span> size = <span class="hljs-built_in">rand</span>() % maxSize + <span class="hljs-number">1</span>;  <span class="hljs-comment">// 随机数组长度</span><br>        <span class="hljs-type">int</span> *arr1 = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[size];<span class="hljs-comment">//开辟数组空间</span><br>        <span class="hljs-type">int</span> *arr2 = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[size];<br>        <br>        <span class="hljs-comment">// 生成随机数组</span><br>        <span class="hljs-built_in">generateRandomArray</span>(arr1, size, rangeL, rangeR);<br>        <span class="hljs-built_in">copyArray</span>(arr1, arr2, size);  <span class="hljs-comment">// 复制到另一个数组</span><br><br>        <span class="hljs-comment">// 使用插入排序</span><br>        <span class="hljs-built_in">sort3</span>(arr1, size);<br>        <span class="hljs-comment">// 使用std::sort</span><br>        <span class="hljs-built_in">comparator</span>(arr2, size);<br><br>        <span class="hljs-comment">// 比较两种排序结果</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; size; j++) &#123;<br>            <span class="hljs-keyword">if</span> (arr1[j] != arr2[j]) &#123;<br>                succeed = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">delete</span>[] arr1;<br>        <span class="hljs-keyword">delete</span>[] arr2;<br><br>        <span class="hljs-keyword">if</span> (!succeed) &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;Test failed!&quot;</span> &lt;&lt; endl;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (succeed) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;All tests passed!&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试样例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">srand</span>(<span class="hljs-built_in">time</span>(<span class="hljs-number">0</span>));<br>    <span class="hljs-type">int</span> testTime = <span class="hljs-number">1000</span>;  <span class="hljs-comment">// 测试次数</span><br>    <span class="hljs-type">int</span> maxSize = <span class="hljs-number">100</span>;    <span class="hljs-comment">// 最大数组大小</span><br>    <span class="hljs-type">int</span> rangeL = <span class="hljs-number">0</span>;       <span class="hljs-comment">// 数组元素最小值</span><br>    <span class="hljs-type">int</span> rangeR = <span class="hljs-number">100</span>;     <span class="hljs-comment">// 数组元素最大值</span><br><br>    <span class="hljs-built_in">test</span>(testTime, maxSize, rangeL, rangeR);<br><br></code></pre></td></tr></table></figure><h2 id="用递归找给定数组给定范围的最大值"><a href="#用递归找给定数组给定范围的最大值" class="headerlink" title="用递归找给定数组给定范围的最大值"></a>用递归找给定数组给定范围的最大值</h2><p><strong>实质：多叉树后续遍历</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">process</span><span class="hljs-params">(<span class="hljs-type">int</span> *arr,<span class="hljs-type">int</span> L,<span class="hljs-type">int</span> R)</span></span>&#123;<br><span class="hljs-type">int</span> mid,lmid,rmid;<br>    <span class="hljs-keyword">if</span>(L-R==<span class="hljs-number">0</span>)&#123;<br>       <span class="hljs-keyword">return</span> arr[L];<br>    &#125;<br>     <span class="hljs-keyword">else</span>&#123;<br>    mid=L+((R-L)/<span class="hljs-number">2</span>);<br>    lmid=<span class="hljs-built_in">process</span>(arr,L,mid);<br>    rmid=<span class="hljs-built_in">process</span>(arr,mid<span class="hljs-number">+1</span>,R);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(lmid,rmid);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此类问题可以分为等量的子问题 满足master公式 其中O（）是子问题除了调用之外的时间复杂度：</p><p><img src="https://raw.githubusercontent.com/Wendy888888888/image/main/1727773742560.png"></p><div class="note note-success">            <p>递归特点：</p><p>1.函数名称与内部调用名称相同</p><p>2.有临界条件</p>          </div><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge1</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; arr,<span class="hljs-type">int</span> L,<span class="hljs-type">int</span> mid,<span class="hljs-type">int</span> R)</span></span>&#123;<br>    vector &lt;<span class="hljs-type">int</span>&gt;help;<br>    <span class="hljs-type">int</span> p=L;<br>    <span class="hljs-type">int</span> q=mid<span class="hljs-number">+1</span>;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 合并两个子数组</span><br>    <span class="hljs-keyword">while</span> (p &lt;= mid &amp;&amp; q &lt;= R) &#123;<br>        <span class="hljs-keyword">if</span> (arr[p] &lt;= arr[q]) &#123;<br>            help.<span class="hljs-built_in">push_back</span>(arr[p]);<br>            p++;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            help.<span class="hljs-built_in">push_back</span>(arr[q]);<br>            q++;<br>        &#125;<br>        <span class="hljs-comment">// 注意：i 的递增是在循环中自动发生的，因为我们在使用 help.push_back()</span><br>    &#125;<br><br>    <span class="hljs-comment">// 复制剩余的元素（如果有）</span><br>    <span class="hljs-keyword">while</span> (p &lt;= mid) &#123;<br>        help.<span class="hljs-built_in">push_back</span>(arr[p]);<br>        p++;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (q &lt;= R) &#123;<br>        help.<span class="hljs-built_in">push_back</span>(arr[q]);<br>        q++;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;help.<span class="hljs-built_in">size</span>();j++)&#123;<br>    arr[L+j]=help[j];&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">process</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; arr,<span class="hljs-type">int</span> L,<span class="hljs-type">int</span> R)</span></span>&#123;<br><span class="hljs-keyword">if</span>(R-L==<span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br> <span class="hljs-type">int</span> mid = L + (R - L) / <span class="hljs-number">2</span>;  <span class="hljs-comment">// 修正了计算 mid 的方式</span><br><span class="hljs-built_in">process</span>(arr,L,mid);<br><span class="hljs-built_in">process</span>(arr,(mid<span class="hljs-number">+1</span>),R);<br><span class="hljs-built_in">merge1</span>(arr,L,mid,R);<br>&#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="小和问题（归并拓展）"><a href="#小和问题（归并拓展）" class="headerlink" title="小和问题（归并拓展）"></a>小和问题（归并拓展）</h3><p><img src="https://raw.githubusercontent.com/Wendy888888888/image/main/image-20241004224904743.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">merge2</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp;arr,<span class="hljs-type">int</span> L,<span class="hljs-type">int</span> mid, <span class="hljs-type">int</span> R)</span></span>&#123;<br><span class="hljs-comment">//产生小和</span><br><span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> p=L;<br><span class="hljs-type">int</span> q=mid<span class="hljs-number">+1</span>;<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br><br>vector&lt;<span class="hljs-type">int</span>&gt;help;<br><span class="hljs-keyword">while</span> (p&lt;(mid<span class="hljs-number">+1</span>) &amp;&amp;q&lt;R<span class="hljs-number">+1</span>)&#123;<br><br>    res=res+(arr[p]&lt;arr[q]?(arr[p]*(R-q<span class="hljs-number">+1</span>)):<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">//接下来是正常的归并排序</span><br>    <span class="hljs-keyword">if</span> (arr[p]&lt;arr[q])&#123;<br>    help.<span class="hljs-built_in">push_back</span>(arr[p]);<br>        p++;<br><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>   help.<span class="hljs-built_in">push_back</span>(arr[q]);<br>    q++;<br>   &#125;<br>&#125;<br><span class="hljs-keyword">while</span>(p&lt;(mid<span class="hljs-number">+1</span>))&#123;<br>   help.<span class="hljs-built_in">push_back</span>(arr[p]);<br>   p++;<br>&#125;<br><span class="hljs-keyword">while</span>(q&lt;R<span class="hljs-number">+1</span>)&#123;<br>  help.<span class="hljs-built_in">push_back</span>(arr[q]);<br><br>   q++;<br>&#125;<br><span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">xiaohe</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; arr,<span class="hljs-type">int</span> L,<span class="hljs-type">int</span> R)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(L==R)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-type">int</span> mid=L+(R-L)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">xiaohe</span>(arr,L,mid)+<span class="hljs-built_in">xiaohe</span>(arr,mid<span class="hljs-number">+1</span>,R)+<span class="hljs-built_in">merge2</span>(arr,L,mid,R);<br><br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>vector &lt;<span class="hljs-type">int</span>&gt;arr=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>&#125;;<br>cout&lt;&lt;<span class="hljs-built_in">xiaohe</span>(arr,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h2><p><strong>快排3.0版本 随机选一个数做划分  时间：O(nlogn) 空间：O(logn)</strong></p><p>partition过程：</p><p><img src="https://raw.githubusercontent.com/Wendy888888888/image/main/image-20241005161619429.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector &lt;<span class="hljs-type">int</span>&gt; <span class="hljs-built_in">partition1</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp;arr,<span class="hljs-type">int</span> L,<span class="hljs-type">int</span> R)&#123;<br>    <span class="hljs-type">int</span> i=L;<span class="hljs-comment">//i是当前位置</span><br>    <span class="hljs-type">int</span> p=L<span class="hljs-number">-1</span>;<span class="hljs-comment">//左区边界 界限打在属于左区的地方</span><br>    <span class="hljs-type">int</span> q=R;<span class="hljs-comment">//右区边界</span><br>    vector &lt;<span class="hljs-type">int</span>&gt;boundary;<br>    <span class="hljs-keyword">while</span>(i&lt;q)&#123;<br>            <span class="hljs-keyword">if</span>(arr[i]&lt;arr[R])&#123;<br>                <span class="hljs-built_in">swap</span>(arr[i],arr[p<span class="hljs-number">+1</span>]);<br>                p++;<br>                i++;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(arr[i]&gt;arr[R])&#123;<br>            <span class="hljs-built_in">swap</span>(arr[i],arr[q<span class="hljs-number">-1</span>]);<br>            q--;&#125;<span class="hljs-keyword">else</span>&#123;<br>            i++;<br>     &#125;<br>    &#125;<br>    <span class="hljs-built_in">swap</span>(arr[R],arr[q]);<br>    boundary.<span class="hljs-built_in">push_back</span>(p<span class="hljs-number">+1</span>);<br>    boundary.<span class="hljs-built_in">push_back</span>(q);<br>    <span class="hljs-keyword">return</span> boundary;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quicksort</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp;arr,<span class="hljs-type">int</span> L,<span class="hljs-type">int</span> R)</span></span>&#123;<br><span class="hljs-keyword">if</span>(L&gt;=R)&#123;<span class="hljs-comment">//不容错漏</span><br>    <span class="hljs-keyword">return</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>vector &lt;<span class="hljs-type">int</span>&gt;boundary;<br><span class="hljs-built_in">swap</span>(arr[L+<span class="hljs-built_in">rand</span>()%(R-L<span class="hljs-number">+1</span>)],arr[R]);<span class="hljs-comment">//R处是校对number</span><br>boundary=<span class="hljs-built_in">partition1</span>(arr,L,R);<br><span class="hljs-built_in">quicksort</span>(arr,L,boundary[<span class="hljs-number">0</span>]<span class="hljs-number">-1</span>);<br><span class="hljs-built_in">quicksort</span>(arr,boundary[<span class="hljs-number">1</span>]<span class="hljs-number">+1</span>,R);<br><br>&#125;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>vector &lt;<span class="hljs-type">int</span>&gt;arr=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>&#125;;<br><br><span class="hljs-built_in">quicksort</span>(arr, <span class="hljs-number">0</span>, arr.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>); <br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-built_in">size</span>(); i++) &#123;<br>    cout &lt;&lt; arr[i] &lt;&lt; endl;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>大根堆：所有子树的根就是子树最大的值</p><p>基本性质：<img src="https://raw.githubusercontent.com/Wendy888888888/image/main/image-20241006153119333.png"></p><p><strong>自下而上（heapinsert) 用户新加一个数组建堆 时间O(logN)</strong></p><p><strong>自上而下（heapfy) 把最大值移出</strong>（减小heapsize)<strong>调整堆 时间O(logN)</strong></p><h3 id="堆排序-时O-nlogn-空O-1"><a href="#堆排序-时O-nlogn-空O-1" class="headerlink" title="堆排序 时O(nlogn) 空O(1)"></a>堆排序 时O(<strong>nlogn</strong>) 空O(1)</h3><p>heapsize-数字个数</p><p>用户一个一个给数据（往上搭建大根堆）时间O(nlogn)</p><p>用户一下子给全部数据（向下搭建小根堆）时间O(n)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//插入下标为index的数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">heapinsert</span><span class="hljs-params">(vector &lt;<span class="hljs-type">int</span>&gt;&amp;arr,<span class="hljs-type">int</span> index)</span></span>&#123;<br><span class="hljs-keyword">while</span>(arr[index]&gt;arr[(index<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>])&#123;<span class="hljs-comment">//不满足大根堆或者下标已经是0（堆最上方）</span><br>    <span class="hljs-built_in">swap</span>(arr[index],arr[(index<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>]);<br>    index=(index<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>;<br>&#125;<br><br>&#125;<br><span class="hljs-comment">//某数在index位置能否向下移动</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">heapfy</span><span class="hljs-params">(vector &lt;<span class="hljs-type">int</span>&gt;&amp;arr,<span class="hljs-type">int</span> index,<span class="hljs-type">int</span> heapsize)</span></span>&#123;<br>    <span class="hljs-type">int</span> largest;<br>    <span class="hljs-keyword">while</span>(index*<span class="hljs-number">2</span><span class="hljs-number">+1</span>&lt;heapsize)&#123;<span class="hljs-comment">//下方有孩子</span><br>        <span class="hljs-keyword">if</span>(index*<span class="hljs-number">2</span><span class="hljs-number">+2</span>&lt;heapsize)&#123;<br>           <span class="hljs-type">int</span> a=arr[index*<span class="hljs-number">2</span><span class="hljs-number">+1</span>]&gt;arr[index*<span class="hljs-number">2</span><span class="hljs-number">+2</span>]?(index*<span class="hljs-number">2</span><span class="hljs-number">+1</span>):(index*<span class="hljs-number">2</span><span class="hljs-number">+2</span>);<br>            largest=arr[a]&gt;arr[index]?a:index;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>        largest=arr[index*<span class="hljs-number">2</span><span class="hljs-number">+1</span>]&gt;arr[index]?(index*<span class="hljs-number">2</span><span class="hljs-number">+1</span>):index;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(largest==index)&#123;<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">swap</span>(arr[largest],arr[index]);<br>        index=largest;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>堆排序：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">heapsort</span><span class="hljs-params">(vector &lt;<span class="hljs-type">int</span>&gt;&amp;arr,<span class="hljs-type">int</span> heapsize)</span></span>&#123;<br> <span class="hljs-comment">//根据给定arr搭建堆</span><br> <span class="hljs-comment">//(1)log（n）</span><br> <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=heapsize<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>    <span class="hljs-built_in">heapfy</span>(arr,i,heapsize);<br> &#125;<br> <span class="hljs-comment">//(2)log(nlogn)</span><br>  <span class="hljs-comment">//for(int i=0;i&lt;heapsize;i++)&#123;</span><br>    <span class="hljs-comment">//heapinsert(arr,i);</span><br> <span class="hljs-comment">//&#125;</span><br> <span class="hljs-built_in">swap</span>(arr[<span class="hljs-number">0</span>],arr[heapsize<span class="hljs-number">-1</span>]);<br> heapsize--;<span class="hljs-comment">//最大值离开排序序列，安置在最后</span><br> <span class="hljs-built_in">heapfy</span>(arr,<span class="hljs-number">0</span>,heapsize);<br> <span class="hljs-keyword">while</span>(heapsize&gt;<span class="hljs-number">0</span>)&#123;<br>     <span class="hljs-built_in">swap</span>(arr[<span class="hljs-number">0</span>],arr[heapsize<span class="hljs-number">-1</span>]);<br> heapsize--;<span class="hljs-comment">//最大值离开排序序列，安置在最后</span><br> <span class="hljs-built_in">heapfy</span>(arr,<span class="hljs-number">0</span>,heapsize);<br> &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>vector &lt;<span class="hljs-type">int</span>&gt;arr=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,<span class="hljs-number">10</span>,<span class="hljs-number">5</span>&#125;;<br><span class="hljs-built_in">heapsort</span>(arr,<span class="hljs-number">6</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">6</span>;i++)&#123;<br>    cout&lt;&lt;arr[i]&lt;&lt;endl;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Wendy888888888/image/main/image-20241006214353031.png" alt="堆结构例题"></p><p>排序过程中小根堆的heapsize保持在k个：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>priority_queue&lt;<span class="hljs-type">int</span>&gt; q; <span class="hljs-comment">// 定义一个空的优先队列， 默认是大根堆,较大的优先</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CompareIntegers</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> a&gt;b;<span class="hljs-comment">//把比较反过来</span><br>    &#125;<br>&#125;;<br><br>vector &lt;<span class="hljs-type">int</span>&gt; <span class="hljs-built_in">heapsort</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp;arr,<span class="hljs-type">int</span> k)&#123;<br>priority_queue&lt;<span class="hljs-type">int</span>,vector&lt;<span class="hljs-type">int</span>&gt;, CompareIntegers&gt; p;<span class="hljs-comment">//小根堆</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;k;i++ )&#123;<br>    p.<span class="hljs-built_in">push</span>(arr[i]);<br>    &#125;<br>    vector &lt;<span class="hljs-type">int</span>&gt;brr;<br>    brr.<span class="hljs-built_in">push_back</span>(p.<span class="hljs-built_in">top</span>());<br><br>    <span class="hljs-keyword">while</span>(k&lt;arr.<span class="hljs-built_in">size</span>())&#123;<br>               p.<span class="hljs-built_in">pop</span>();<br>               p.<span class="hljs-built_in">push</span>(arr[k]);<br>               k++;<br>        brr.<span class="hljs-built_in">push_back</span>(p.<span class="hljs-built_in">top</span>());<br><br>    &#125;<br>    <span class="hljs-keyword">while</span> (!p.<span class="hljs-built_in">empty</span>())&#123;<br>        brr.<span class="hljs-built_in">push_back</span>(p.<span class="hljs-built_in">top</span>());<br>        p.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> brr;<br><br>&#125;<br><br><br><span class="hljs-comment">//测试</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br>vector &lt;<span class="hljs-type">int</span>&gt;arr=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>&#125;;<span class="hljs-comment">//给定的数组必须是几乎有序数组</span><br><span class="hljs-type">int</span> k=<span class="hljs-number">6</span>;<br><br>vector&lt;<span class="hljs-type">int</span>&gt;brr=<span class="hljs-built_in">heapsort</span>(arr,k);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i:brr)&#123;<br>    cout&lt;&lt;i&lt;&lt;endl;<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="比较器"><a href="#比较器" class="headerlink" title="比较器"></a>比较器</h2><p>别名：重载运算符  重载了<code>operator()</code>以允许像调用函数那样调用它。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 定义一个比较器类  </span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CompareIntegers</span> &#123;  <br><span class="hljs-keyword">public</span>:  <br>    <span class="hljs-comment">// 重载operator()，用于比较两个整数  </span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> <span class="hljs-type">const</span> </span>&#123;  <br>        <span class="hljs-comment">// 这里我们定义了一个降序的比较器  </span><br>        <span class="hljs-keyword">return</span> a &gt; b;  <br>    &#125;  <br>&#125;;  <br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;  <br>    vector&lt;<span class="hljs-type">int</span>&gt; numbers = &#123;<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>&#125;;  <br>    CompareIntegers comp; <span class="hljs-comment">// 创建CompareIntegers的实例  </span><br>    <span class="hljs-comment">// 使用sort和自定义比较器对vector进行排序  </span><br>    <span class="hljs-built_in">sort</span>(numbers.<span class="hljs-built_in">begin</span>(), numbers.<span class="hljs-built_in">end</span>(), comp); <br>    <span class="hljs-comment">// 迭代输出排序后的结果  </span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> number : numbers) &#123;  <br>       cout &lt;&lt; number &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><p>用比较器把默认大根堆变成小根堆</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++">priority_queue&lt;<span class="hljs-type">int</span>&gt; q; <span class="hljs-comment">// 定义一个空的优先队列， 默认是大根堆,较大的优先</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CompareIntegers</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> a&gt;b;<span class="hljs-comment">//把比较反过来</span><br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">//测试</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>priority_queue&lt;<span class="hljs-type">int</span>,vector&lt;<span class="hljs-type">int</span>&gt;, CompareIntegers&gt; p;<span class="hljs-comment">//小根堆</span><br>p.<span class="hljs-built_in">push</span>(<span class="hljs-number">3</span>);<br>p.<span class="hljs-built_in">push</span>(<span class="hljs-number">9</span>);<br>p.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">while</span>(!p.<span class="hljs-built_in">empty</span>())&#123;<br>cout&lt;&lt;p.<span class="hljs-built_in">top</span>()&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>p.<span class="hljs-built_in">pop</span>();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Wendy888888888/image/main/image-20241007013404160.png" alt="详细解释"></p><h2 id="不基于比较的排序（桶排序）"><a href="#不基于比较的排序（桶排序）" class="headerlink" title="不基于比较的排序（桶排序）"></a>不基于比较的排序（桶排序）</h2><p><strong>计数排序</strong></p><p>遍历一遍数据，a[n]&#x3D;数据是n的个数</p><p><strong>基数排序（桶排序）</strong></p><p>从右到左看数位 从左到右遍历数组 先入桶的先出桶</p><p><img src="https://raw.githubusercontent.com/Wendy888888888/image/main/4I67JWMH~%XA8_4%7DX0@I32I.jpg"></p><p>在代码层面，出桶过程&#x3D;&gt;辅助数组的填充</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">weishu</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp;arr)</span></span>&#123;<br><span class="hljs-comment">//得到最大数的位数</span><br><span class="hljs-type">int</span> maxnum=arr[<span class="hljs-number">0</span>];<br><span class="hljs-type">int</span> index=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.<span class="hljs-built_in">size</span>();i++)&#123;<br>        <span class="hljs-keyword">if</span>(arr[i]&gt;maxnum)&#123;<br>            maxnum=arr[i];<br>            index=i;<br><br>        &#125;<br><br>    &#125;<br>      <span class="hljs-type">int</span> count=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(maxnum&gt;<span class="hljs-number">0</span>)&#123;<br><br>    maxnum/=<span class="hljs-number">10</span>;<br>    count++;<br>&#125;<br><br><span class="hljs-keyword">return</span> count;<br>&#125;<br><br><span class="hljs-comment">//取出相应位数的数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getdigit</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> j)</span></span>&#123;<span class="hljs-comment">//p的第几位（个十百）</span><br><span class="hljs-type">int</span> k;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=j;i++)&#123;<br>    k=p%<span class="hljs-number">10</span>;<br>    p=p/<span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-keyword">return</span> k;&#125;<br><br><br><span class="hljs-comment">//出一次桶（生成辅助数组）排一次序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">jishupaixu</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp;arr)</span></span>&#123;<br><br><span class="hljs-type">int</span> digit=<span class="hljs-built_in">weishu</span>(arr);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;digit;i++)&#123;<br>        <span class="hljs-type">int</span> tong[<span class="hljs-number">10</span>]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> num:arr)&#123;<br>            <span class="hljs-type">int</span> index=<span class="hljs-built_in">getdigit</span>(num,i);<br>            tong[index]++;<br>        &#125;<br><br><span class="hljs-comment">//把桶修改成前缀和</span><br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> b =<span class="hljs-number">1</span>;b&lt;<span class="hljs-number">10</span>;b++)&#123;<br>        tong[b]=tong[b]+tong[b<span class="hljs-number">-1</span>];<br>      &#125;<br><br>  <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">fuzhu</span><span class="hljs-params">(arr.size())</span></span>;  <span class="hljs-comment">// 辅助数组</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> c=arr.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;c&gt;=<span class="hljs-number">0</span>;c--)&#123;<br>        <span class="hljs-type">int</span> j=<span class="hljs-built_in">getdigit</span>(arr[c],i);<br>        <span class="hljs-keyword">if</span>(tong[j]<span class="hljs-number">-1</span>&gt;=<span class="hljs-number">0</span>)&#123;<br>    fuzhu[tong[j]<span class="hljs-number">-1</span>]=arr[c];<br>    tong[j]--;&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> d=<span class="hljs-number">0</span>;d&lt;arr.<span class="hljs-built_in">size</span>();d++)&#123;<br>    arr[d]=fuzhu[d];<span class="hljs-comment">//一次排序做完</span><br>&#125;<br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>vector &lt;<span class="hljs-type">int</span>&gt; arr=&#123;<span class="hljs-number">107</span>,<span class="hljs-number">103</span>,<span class="hljs-number">201</span>,<span class="hljs-number">56</span>,<span class="hljs-number">24</span>,<span class="hljs-number">320</span>,<span class="hljs-number">10</span>,<span class="hljs-number">254</span>&#125;;<br><span class="hljs-built_in">jishupaixu</span>(arr);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i:arr)&#123;<br>    cout&lt;&lt;i&lt;&lt;endl;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><div class="note note-success">            <p>下标和数值对应技巧：</p><p>for(int c&#x3D;arr.size()-1;c&gt;&#x3D;0;c–){<br>        int j&#x3D;getdigit(arr[c],i);<br>        if(tong[j]-1&gt;&#x3D;0){<br>    fuzhu[tong[j]-1]&#x3D;arr[c];<br>    tong[j]–;}<br>}</p><p><strong>多列几个数组，a数组的下标和b数组的数据构成联系</strong></p>          </div><h2 id="稳定性评估"><a href="#稳定性评估" class="headerlink" title="稳定性评估"></a>稳定性评估</h2><p>如果同样大小的数有跨越行径，则不稳定。如简单选择、堆排序，快排</p><p>稳定：冒泡排序、插入排序</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://raw.githubusercontent.com/Wendy888888888/image/main/NW7%7E_9%253OPKGNWLHYODMZ%5BX.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/09/14/hello-world/"/>
    <url>/2024/09/14/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="Tag"><a href="#Tag" class="headerlink" title="Tag"></a>Tag</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% note success %&#125;<br>文字 或者 <span class="hljs-code">`markdown`</span> 均可<br>&#123;% endnote %&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
